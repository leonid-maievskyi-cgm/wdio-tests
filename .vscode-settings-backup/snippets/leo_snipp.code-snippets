{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    // AQA Engineer

    // Cypress + Cucunber ========================================
    "create class Page": {
        "scope": "javascript, typescript",
        "prefix": "cp",
        "body": "import Base from \"./base\";\n\nclass ${1:Name}Page extends Base {\n\n\tbaseUrl='';\n\n\telements = {\n\n\t}\n\n\tinputValues = {\n\n\t}\n\n}\n\nexport const ${2:name}Page = new ${1:Name}Page();",
        "description": "create a new class for Page"
    },

    "full steps definition": {
        "scope": "javascript, typescript",
        "prefix": "sdg",
        "body": "Given('', () => {\n\n});\n\nWhen('', () => {\n\n});\n\nThen('', () => {\n\n});",
        "description": "full steps definition"
    },

    "short steps definition": {
        "scope": "javascript, typescript",
        "prefix": "sd",
        "body": "When('', () => {\n\n});\n\nThen('', () => {\n\n});",
        "description": "short steps definition"
    },

    "full features": {
        "scope": "javascript, typescript",
        "prefix": "ff",
        "body": "Feature: \n\n\tBackground:\n\tGiven \n\n\tScenario: \n\tWhen \n\tThen",
        "description": "full features"
    },
    // ==========================================================

    // WebdriverIO ===========================================
    "browser pause": {
        "scope": "javascript, typescript",
        "prefix": "bp",
        "body": "await browser.pause(${1:5000});",
        "description": "browser pause"
    },

    "describe": {
        "scope": "javascript, typescript",
        "prefix": "de",
        "body": "describe${1:.only}('$2', () => {\n\tit('$3', ${4:async} () => {\n\t$5\n\t});\n})\n",
        "description": "describe"
    },

    "it test": {
        "scope": "javascript, typescript",
        "prefix": "it",
        "body": "it('$1', ${2:async} () => {\n\t\n});",
        "description": "it test"
    },

    "return locator": {
        "scope": "javascript, typescript",
        "prefix": "re",
        "body": "return $('$1')",
        "description": "return locator"
    }

    // ==========================================================

    // Shorts CODE:

    // *working with a new window:

    // it('Handling new tab', () => {
    //     cy
    //       .get('#contact-us')
    //       .invoke("removeAttr", "target")
    //       .invoke('attr','target','_self')
    //       .click() // will open the contact page in a new tab
    //     cy.get("h1").should("have.text", "Contact");
    //   })
}
